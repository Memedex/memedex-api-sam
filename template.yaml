# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Memedex API for managing the dankest memes.

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

Globals:
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  getAllMemePostsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: MemedexApi
      Handler: net.ddns.memedex.handler.GetAllMemePosts::handleRequest
      Runtime: java17
      Architectures:
        - x86_64
      MemorySize: 16384
      Timeout: 100
      Policies:
        # Give Create/Read/Update/Delete Permissions to the MemedexTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MemedexTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE_NAME: !Ref MemedexTable
          AWS_ENV: ""
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/memepost/
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  getMemePostByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: MemedexApi
      Handler: net.ddns.memedex.handler.GetMemePostById::handleRequest
      Runtime: java17
      Architectures:
        - x86_64
      MemorySize: 16384
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the MemedexTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MemedexTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE_NAME: !Ref MemedexTable
          AWS_ENV: ""
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/memepost/{id}
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  createMemePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: MemedexApi
      Handler: net.ddns.memedex.handler.CreateMemePost::handleRequest
      Runtime: java17
      Architectures:
        - x86_64
      MemorySize: 16384
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the MemedexTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MemedexTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE_NAME: !Ref MemedexTable
          AWS_ENV: ""
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/memepost/
            Method: POST

  updateMemePostByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: MemedexApi
      Handler: net.ddns.memedex.handler.UpdateMemePostById::handleRequest
      Runtime: java17
      Architectures:
        - x86_64
      MemorySize: 16384
      Timeout: 100
      Description: A simple example includes a HTTP update method to modify one item in the DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the MemedexTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MemedexTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE_NAME: !Ref MemedexTable
          AWS_ENV: ""
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/memepost/{id}
            Method: PUT

  deleteMemePostByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: MemedexApi
      Handler: net.ddns.memedex.handler.DeleteMemePostById::handleRequest
      Runtime: java17
      Architectures:
        - x86_64
      MemorySize: 16384
      Timeout: 100
      Description: A simple example includes a HTTP delete method to delete one item by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the MemedexTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MemedexTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE_NAME: !Ref MemedexTable
          AWS_ENV: ""
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/memepost/{id}
            Method: DELETE

  MemedexTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "memedex"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: "invertedIndex"
          KeySchema:
            - AttributeName: "SK"
              KeyType: "HASH"
            - AttributeName: "PK"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
